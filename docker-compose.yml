version: '3.8'

services:
  # PostgreSQL Database for Order Service
  order-postgres:
    image: postgres:16-alpine
    container_name: order-postgres
    ports:
      - "5432:5432"
    volumes:
      - order_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: order_service
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database for User Service
  user-postgres:
    image: postgres:16-alpine
    container_name: user-postgres
    ports:
      - "5433:5432"
    volumes:
      - user_postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: user_service
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for Notification Service
  mongodb:
    image: mongo:6.0
    container_name: notification-mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - ecommerce-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: ecommerce-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ecommerce-network
    healthcheck:
      test: echo srvr | nc zookeeper 2181
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: ecommerce-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - ecommerce-network
    healthcheck:
      test: kafka-topics --bootstrap-server kafka:29092 --list
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Order Service
  # order-service:
  #   build:
  #     context: ./backend/services/order-service
  #     dockerfile: Dockerfile
  #   container_name: order-service
  #   depends_on:
  #     order-postgres:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   ports:
  #     - "8083:8082"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   networks:
  #     - ecommerce-network

  # User Service
  # user-service:
  #   build:
  #     context: ./backend/services/user-service
  #     dockerfile: Dockerfile
  #   container_name: user-service
  #   depends_on:
  #     user-postgres:
  #       condition: service_healthy
  #   ports:
  #     - "8084:8082"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   networks:
  #     - ecommerce-network

  # Notification Service
  # notification-service:
  #   build:
  #     context: ./backend/services/notification-service
  #     dockerfile: Dockerfile
  #   container_name: notification-service
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #   ports:
  #     - "8085:8082"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   networks:
  #     - ecommerce-network

  # Payment Service
  # payment-service:
  #   build:
  #     context: ./backend/services/payment-service
  #     dockerfile: Dockerfile
  #   container_name: payment-service
  #   depends_on:
  #     kafka:
  #       condition: service_healthy
  #   ports:
  #     - "8086:8082"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   networks:
  #     - ecommerce-network

  # Product Service
  # product-service:
  #   build:
  #     context: ./backend/services/product-service
  #     dockerfile: Dockerfile
  #   container_name: product-service
  #   ports:
  #     - "8087:8082"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   networks:
  #     - ecommerce-network

  # Inventory Service
  # inventory-service:
  #   build:
  #     context: ./backend/services/inventory-service
  #     dockerfile: Dockerfile
  #   container_name: inventory-service
  #   ports:
  #     - "8088:8082"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   networks:
  #     - ecommerce-network

  # API Gateway
  # api-gateway:
  #   build:
  #     context: ./backend/gateway
  #     dockerfile: Dockerfile
  #   container_name: api-gateway
  #   ports:
  #     - "8080:8080"
  #   environment:
  #     - SPRING_PROFILES_ACTIVE=docker
  #   networks:
  #     - ecommerce-network

networks:
  ecommerce-network:
    driver: bridge

volumes:
  order_postgres_data:
  user_postgres_data:
  mongodb_data: 